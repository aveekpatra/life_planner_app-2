---
description:
globs:
alwaysApply: false
---
# Google Calendar Integration

The app features a comprehensive Google Calendar integration to display and manage events.

## Key Files

### Backend
- [convex/googleCalendarAuth.ts](mdc:convex/googleCalendarAuth.ts) - Stores and manages auth tokens
- [convex/schema.ts](mdc:convex/schema.ts) - Defines `googleCalendarAuth` table structure

### Frontend
- [src/hooks/useGoogleCalendar.ts](mdc:src/hooks/useGoogleCalendar.ts) - Custom hook managing auth and event fetching
- [src/services/GoogleCalendarService.ts](mdc:src/services/GoogleCalendarService.ts) - Service for API interactions
- [src/components/CalendarWidget.tsx](mdc:src/components/CalendarWidget.tsx) - Calendar UI with week/month views
- [src/components/CalendarTimeline.tsx](mdc:src/components/CalendarTimeline.tsx) - Timeline visualization of events

## Authentication Flow
1. User authorizes with Google OAuth via popup window
2. Access and refresh tokens stored in Convex database
3. Refresh tokens used for silent re-authentication
4. Handles token expiration and renewal automatically

## Event Handling
- Fetches events based on current view (week/month)
- Caches events in localStorage for 5 minutes to reduce API calls
- Displays Google Calendar events with proper color coding based on event/calendar colors
- Supports viewing both all-day and timed events
- Uses date range tracking to avoid redundant API calls

## Optimizations
- Uses `previousDateRange` ref to prevent duplicate refreshes of the same date range
- Implements debounce pattern for frequent date changes
- Handles state management carefully to avoid infinite render loops
- Proper error handling for API limits and auth failures
- Responsive design for different screen sizes

## State Management
- Controls loading states to provide feedback during API operations
- Maintains authorization state through Convex queries
- Processes and normalizes event data for consistent display
- Provides user feedback during connection process
